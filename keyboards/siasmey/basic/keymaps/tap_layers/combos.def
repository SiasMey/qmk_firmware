//   name     result    chord keys
// middle left
COMB(WF, KC_LCBR, KC_W, KC_F)                   // {
COMB(RS, KC_LPRN, LGUI_T(KC_R), LALT_T(KC_S))   // (
COMB(XC, KC_LBRC, KC_X, KC_C)                   // [

// middle right
COMB(YU, KC_RCBR, KC_Y, KC_U)                   // }
COMB(IE, KC_RPRN, RGUI_T(KC_I), RALT_T(KC_E))   // )
COMB(DOTCOMM, KC_RBRC, KC_DOT, KC_COMM)         // ]

// inside left
COMB(FP, KC_PERC, KC_F, KC_P)                   // %
COMB(ST, KC_EXLM, LALT_T(KC_S), LCTL_T(KC_T))   // !
COMB(CD, KC_CIRC, KC_C, KC_D)                   // ^

// inside right
COMB(UL, KC_ASTR, KC_U, KC_L)                   // *
COMB(EN, KC_EQL, RALT_T(KC_E), RCTL_T(KC_N))    // =
COMB(COMMH, KC_DLR, KC_COMM, KC_H)              // $

// outside left
COMB(QW, KC_AT, KC_Q, KC_W)                     // @
COMB(AR, KC_GRV, KC_A, LGUI_T(KC_R))            // `
COMB(ZX, KC_LT, KC_Z, KC_X)                     // <

// outside right
COMB(SCLNY, KC_QUOT, KC_SCLN, KC_Y)             // QUOT
COMB(OI, KC_DQT,KC_O, RGUI_T(KC_I))             // "
COMB(DOTSLS, KC_GT, KC_DOT, KC_SLSH)            // > 

// split left
COMB(WP, KC_AMPR, KC_W, KC_P)                   // &
COMB(RT, KC_GRV, LGUI_T(KC_R), LCTL_T(KC_T))    // `
COMB(XD, KC_LT, KC_X, KC_D)                     // <

// split right
COMB(YL, KC_HASH, KC_Y, KC_L)                   // #
COMB(IN, KC_DQT, RGUI_T(KC_I), RCTL_T(KC_N))    // "
COMB(DOTH, KC_GT, KC_DOT, KC_H)                 // >

// triple left
COMB(WFP, KC_NO, KC_W, KC_F, KC_P)              // TAB
COMB(RST, KC_TAB, LGUI_T(KC_R), LALT_T(KC_S), LCTL_T(KC_T))  // CAPS
COMB(XCD, KC_NO, KC_X, KC_C, KC_D)              // NONE

// triple right
COMB(YUL, KC_BSLS, KC_Y, KC_U, KC_L)            // '\'
COMB(IEN, KC_MINS, RGUI_T(KC_I), RALT_T(KC_E), RCTL_T(KC_N))            // -
COMB(DOTCOMMH, KC_UNDS, KC_DOT, KC_COMM,  KC_H) // _
