// name     result    chord keys
// middle left
COMB(WF, KC_LCBR, KC_W, KC_F)                   // {
COMB(RS, KC_LPRN, LGUI_T(KC_R), LALT_T(KC_S))   // (
COMB(XC, KC_LBRC, KC_X, KC_C)                   // [

// middle right
COMB(YU, KC_RCBR, KC_Y, KC_U)                   // }
COMB(IE, KC_RPRN, RGUI_T(KC_I), RALT_T(KC_E))   // )
COMB(DOTCOMM, KC_RBRC, KC_DOT, KC_COMM)         // ]

// inside left
COMB(FP, KC_PERC, KC_F, KC_P)                   // %
COMB(ST, KC_EXLM, LALT_T(KC_S), LCTL_T(KC_T))   // !
COMB(CD, KC_CIRC, KC_C, KC_D)                   // ^

// inside right
COMB(UL, KC_ASTR, KC_U, KC_L)                   // *
COMB(EN, KC_EQL, RALT_T(KC_E), RCTL_T(KC_N))    // =
COMB(COMMH, KC_DLR, KC_COMM, KC_H)              // $

// outside left
COMB(QW, KC_NO, KC_Q, KC_W)                      // None
COMB(AR, KC_GRV, LT(5, KC_A), LGUI_T(KC_R))      // `
COMB(ZX, KC_AT, KC_Z, KC_X)                      // @

// outside right
COMB(SCLNY, KC_NO, KC_SCLN, KC_Y)                // None
COMB(OI, KC_DQT,KC_O, RGUI_T(KC_I))              // "
COMB(DOTSLS, KC_QUOT, KC_DOT, KC_SLSH)           // Quote

// split left
COMB(WP, KC_AMPR, KC_W, KC_P)                    // &
COMB(RT, KC_TILD, LGUI_T(KC_R), LCTL_T(KC_T))    // ~
COMB(XD, KC_NO, KC_X, KC_D)                      // None

// split right
COMB(YL, KC_HASH, KC_Y, KC_L)                    // #
COMB(IN, KC_NO, RGUI_T(KC_I), RCTL_T(KC_N))      // None
COMB(DOTH, KC_NO, KC_DOT, KC_H)                  // None

// triple left
COMB(WFP, KC_NO, KC_W, KC_F, KC_P)                           // None
COMB(RST, KC_TAB, LGUI_T(KC_R), LALT_T(KC_S), LCTL_T(KC_T))  // TAB
COMB(XCD, KC_NO, KC_X, KC_C, KC_D)                           // None

// triple right
COMB(YUL, KC_BSLS, KC_Y, KC_U, KC_L)                         // '\'
COMB(IEN, KC_MINS, RGUI_T(KC_I), RALT_T(KC_E), RCTL_T(KC_N)) // -
COMB(DOTCOMMH, KC_UNDS, KC_DOT, KC_COMM,  KC_H)              // _

COMB(SE, CW_TOGG, KC_S, KC_E)                     // Caps Word On
